{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","components/Banner/index.js","components/OfficeCard/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","score","topScore","Wrapper","id","children","Banner","_ref","OfficeCard","onClick","handleClick","concat","incorrect","alt","name","src","image","Footer","rel","target","App","state","cards","clicked","shuffleCards","array","j","x","i","length","Math","floor","random","_this","removeWobble","includes","setState","alert","console","log","this","previousState","Object","toConsumableArray","checkScore","_this2","components_Navbar","components_Banner","components_Wrapper","map","employee","components_OfficeCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15b1231c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-info\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                Clicky Game\r\n            </a>\r\n            <span className=\"navbar-text\">\r\n                Score: {props.score} | Top Score: {props.topScore}\r\n            </span>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div id=\"wrapper\"className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Banner({ children }) {\r\n  return (\r\n    <div className=\"banner\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction OfficeCard(props) {\r\n    return (\r\n        <a href=\"#wrapper\">\r\n            <div onClick={() => props.handleClick(props.id)} className= {`imageCard ${props.incorrect}`}>\r\n                <img className=\"image\" alt={props.name} src={props.image} />\r\n            </div>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default OfficeCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer bg-info\">\r\n            <div className=\"text-center py-3\">Â© 2019 Copyright:\r\n                <a href=\"https://github.com/jsevern94/clicky-game\" rel=\"noopener noreferrer\" target=\"_blank\"> Jonah Severn</a>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport Banner from \"./components/Banner\";\nimport OfficeCard from \"./components/OfficeCard\";\nimport Footer from \"./components/Footer\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n\n  state = {\n    cards,\n    score: 0,\n    topScore: 0,\n    clicked: [],\n    incorrect: \"\"\n  }\n\n  componentDidMount() {\n    this.setState({\n      cards: this.shuffleCards(cards)\n    });\n  }\n\n  checkScore() {\n    if (this.state.score > this.state.topScore) {\n      this.setState({\n        topScore: this.state.score\n      });\n    }\n    if (this.state.score === 16) {\n      alert(\"You win! Keep playing to set the top score!\")\n      this.setState({\n        clicked: []\n      })\n    }\n    if (this.state.score !== 16 && this.state.clicked.length === 16) {\n      alert(\"Wow, nothing can stop you! Keep going!\")\n      this.setState({\n        clicked: []\n      })\n    }\n  }\n\n  removeWobble() {\n    this.setState({\n      incorrect: \"\"\n    })\n  }\n\n  shuffleCards = array => {\n    var j, x, i;\n    for (i = array.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = array[i];\n        array[i] = array[j];\n        array[j] = x;\n    }\n    return array;\n  }\n\n  handleClick = id => {\n    this.removeWobble();\n    if (this.state.clicked.includes(id)) {\n      this.setState({\n        score: 0,\n        clicked: [],\n        incorrect: \"wobble\"\n      }, function () {\n        alert(\"Game over... Try again!\")\n        console.log(this.state.clicked);\n      })\n    }\n    else {\n      this.setState(previousState => ({\n        score: this.state.score + 1,\n        clicked: [...previousState.clicked, id]\n      }), function () {\n        this.checkScore();\n        console.log(this.state.clicked);\n      })\n    }\n    this.setState({\n      cards: this.shuffleCards(cards)\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Banner>\n          <h1>Click a picture to get started...</h1>\n          <h3>But don't click the same picture more than once!</h3>\n        </Banner>\n        <Wrapper>\n          {this.state.cards.map(employee => (\n            <OfficeCard\n              incorrect={this.state.incorrect}\n              handleClick={this.handleClick}\n              id={employee.id}\n              key={employee.id}\n              name={employee.name}\n              image={employee.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}